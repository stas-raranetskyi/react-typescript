/*
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint.
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! ðŸ’–
*/
module.exports = {
    'env': {
        'browser': true,
        'node': true,
		'jest': true
    },
    'extends': [
        'plugin:@typescript-eslint/recommended',
        'plugin:@typescript-eslint/recommended-requiring-type-checking',
    ],
    'parser': '@typescript-eslint/parser',
    'parserOptions': {
        'project': 'tsconfig.json',
        'sourceType': 'module'
    },
    'plugins': [
        'eslint-plugin-import',
        'eslint-plugin-jsdoc',
        'eslint-plugin-prefer-arrow',
        '@typescript-eslint',
        '@typescript-eslint/tslint',
		'simple-import-sort',
		'react'
    ],
    'rules': {
		'simple-import-sort/imports': 'warn',
        '@typescript-eslint/adjacent-overload-signatures': 'error',
        '@typescript-eslint/array-type': [
            'error',
            {
                'default': 'array'
            }
        ],
        '@typescript-eslint/ban-types': "off",
        '@typescript-eslint/consistent-type-assertions': 'error',
        '@typescript-eslint/dot-notation': 'error',
        '@typescript-eslint/indent': [
            'error',
            'tab'
        ],
        '@typescript-eslint/member-delimiter-style': [
            'error',
            {
                'multiline': {
                    'delimiter': 'semi',
                    'requireLast': true
                },
                'singleline': {
                    'delimiter': 'semi',
                    'requireLast': false
                }
            }
        ],
        '@typescript-eslint/no-empty-function': 'error',
        '@typescript-eslint/no-empty-interface': 'error',
        '@typescript-eslint/no-explicit-any': 'off',
        '@typescript-eslint/no-misused-new': 'error',
        '@typescript-eslint/no-namespace': 'error',
        '@typescript-eslint/no-parameter-properties': 'off',
        '@typescript-eslint/no-unsafe-assignment': 'off',
        '@typescript-eslint/no-shadow': [
            'error',
            {
                'hoist': 'all'
            }
        ],
        '@typescript-eslint/no-unused-expressions': 'error',
        '@typescript-eslint/no-use-before-define': 'off',
        '@typescript-eslint/no-var-requires': 'off',
        '@typescript-eslint/prefer-for-of': 'error',
        '@typescript-eslint/prefer-function-type': 'error',
        '@typescript-eslint/prefer-namespace-keyword': 'error',
		"@typescript-eslint/prefer-regexp-exec": "off",
		'@typescript-eslint/no-floating-promises': 'off',
		'@typescript-eslint/no-unsafe-argument': 'off',
		"@typescript-eslint/explicit-module-boundary-types": "off",
        '@typescript-eslint/quotes': [
            'error',
            'single'
        ],
        '@typescript-eslint/semi': [
            'error',
            'always'
        ],
        '@typescript-eslint/triple-slash-reference': [
            'error',
            {
                'path': 'always',
                'types': 'prefer-import',
                'lib': 'always'
            }
        ],
        '@typescript-eslint/unified-signatures': 'error',
        'array-callback-return': 'warn',
        'arrow-parens': [
            'error',
            'always'
        ],
        'complexity': 'off',
        'constructor-super': 'error',
        'default-case': [
            'warn',
            {
                'commentPattern': '^no default$'
            }
        ],
        'dot-location': [
            'warn',
            'property'
        ],
        'dot-notation': 'error',
        'eqeqeq': [
            'error',
            'smart'
        ],
        'getter-return': 'warn',
        'guard-for-in': 'error',
        'id-denylist': [
            'error',
            'any',
            'Number',
            'number',
            'String',
            'string',
            'Boolean',
            'boolean',
            'Undefined',
            'undefined'
        ],
        'id-match': 'error',
        'import/first': 'error',
        'import/no-amd': 'error',
        'import/no-anonymous-default-export': 'warn',
        'import/no-webpack-loader-syntax': 'error',
        'import/order': 'error',
        'indent': ['off', 'tab'],
        'jsdoc/check-alignment': 'error',
        'jsdoc/check-indentation': 'error',
        'jsdoc/newline-after-description': 'error',
        'max-classes-per-file': [
            'error',
            1
        ],
        'max-len': [
            'error',
            {
                'ignorePattern': '^import [^,]+ from |^export | implements',
                'code': 150
            }
        ],
        'new-parens': 'error',
        'no-array-constructor': 'warn',
        'no-bitwise': 'error',
        'no-caller': 'error',
        'no-cond-assign': 'error',
        'no-console': 'off',
        'no-const-assign': 'warn',
        'no-control-regex': 'warn',
        'no-debugger': 'error',
        'no-delete-var': 'warn',
        'no-dupe-args': 'warn',
        'no-dupe-class-members': 'warn',
        'no-dupe-keys': 'warn',
        'no-duplicate-case': 'warn',
        'no-empty': 'error',
        'no-empty-character-class': 'warn',
        'no-empty-function': 'error',
        'no-empty-pattern': 'warn',
        'no-eval': 'error',
        'no-ex-assign': 'warn',
        'no-extend-native': 'warn',
        'no-extra-bind': 'warn',
        'no-extra-label': 'warn',
        'no-fallthrough': 'off',
        'no-func-assign': 'warn',
        'no-implied-eval': 'warn',
        'no-invalid-regexp': 'warn',
        'no-invalid-this': 'off',
        'no-iterator': 'warn',
        'no-label-var': 'warn',
        'no-labels': [
            'warn',
            {
                'allowLoop': true,
                'allowSwitch': false
            }
        ],
        'no-lone-blocks': 'warn',
        'no-loop-func': 'warn',
        'no-mixed-operators': [
            'warn',
            {
                'groups': [
                    [
                        '&',
                        '|',
                        '^',
                        '~',
                        '<<',
                        '>>',
                        '>>>'
                    ],
                    [
                        '==',
                        '!=',
                        '===',
                        '!==',
                        '>',
                        '>=',
                        '<',
                        '<='
                    ],
                    [
                        '&&',
                        '||'
                    ],
                    [
                        'in',
                        'instanceof'
                    ]
                ],
                'allowSamePrecedence': false
            }
        ],
        'no-multi-str': 'warn',
        'no-native-reassign': 'warn',
        'no-negated-in-lhs': 'warn',
        'no-new-func': 'warn',
        'no-new-object': 'warn',
        'no-new-symbol': 'warn',
        'no-new-wrappers': 'error',
        'no-obj-calls': 'warn',
        'no-octal': 'warn',
        'no-octal-escape': 'warn',
        'no-redeclare': 'warn',
        'no-regex-spaces': 'warn',
        'no-restricted-globals': [
            'error',
            'addEventListener',
            'blur',
            'close',
            'closed',
            'confirm',
            'defaultStatus',
            'defaultstatus',
            'event',
            'external',
            'find',
            'focus',
            'frameElement',
            'frames',
            'history',
            'innerHeight',
            'innerWidth',
            'length',
            'location',
            'locationbar',
            'menubar',
            'moveBy',
            'moveTo',
            'name',
            'onblur',
            'onerror',
            'onfocus',
            'onload',
            'onresize',
            'onunload',
            'open',
            'opener',
            'opera',
            'outerHeight',
            'outerWidth',
            'pageXOffset',
            'pageYOffset',
            'parent',
            'print',
            'removeEventListener',
            'resizeBy',
            'resizeTo',
            'screen',
            'screenLeft',
            'screenTop',
            'screenX',
            'screenY',
            'scroll',
            'scrollbars',
            'scrollBy',
            'scrollTo',
            'scrollX',
            'scrollY',
            'self',
            'status',
            'statusbar',
            'stop',
            'toolbar',
            'top'
        ],
        'no-restricted-properties': [
            'error',
            {
                'object': 'require',
                'property': 'ensure',
                'message': 'Please use import() instead. More info: https://facebook.github.io/create-react-app/docs/code-splitting'
            },
            {
                'object': 'System',
                'property': 'import',
                'message': 'Please use import() instead. More info: https://facebook.github.io/create-react-app/docs/code-splitting'
            }
        ],
        'no-restricted-syntax': [
            'warn',
            'WithStatement'
        ],
        'no-script-url': 'warn',
        'no-self-assign': 'warn',
        'no-self-compare': 'warn',
        'no-sequences': 'warn',
        'no-shadow': 'off',
        'no-shadow-restricted-names': 'warn',
        'no-sparse-arrays': 'warn',
        'no-template-curly-in-string': 'warn',
        'no-this-before-super': 'warn',
        'no-throw-literal': 'error',
        'no-trailing-spaces': 'error',
        'no-undef': 'error',
        'no-undef-init': 'error',
        'no-underscore-dangle': 'error',
        'no-unreachable': 'warn',
        'no-unsafe-finally': 'error',
        'no-unused-expressions': 'error',
        'no-unused-labels': 'error',
        'no-unused-vars': 'off',
        '@typescript-eslint/no-unused-vars': [
            'warn',
            {
                'args': 'none',
                'ignoreRestSiblings': true
            }
        ],
        'no-use-before-define': 'off',
        'no-useless-computed-key': 'warn',
        'no-useless-concat': 'warn',
        'no-useless-constructor': 'warn',
        'no-useless-escape': 'warn',
        'no-useless-rename': [
            'warn',
            {
                'ignoreDestructuring': false,
                'ignoreImport': false,
                'ignoreExport': false
            }
        ],
        'no-var': 'error',
        'no-whitespace-before-property': 'warn',
        'no-with': 'warn',
        'object-shorthand': 'error',
        'one-var': [
            'error',
            'never'
        ],
        'prefer-const': 'error',
		'quotes': ['error', 'single'],
        'radix': 'error',
		'react/jsx-sort-props': ['error', {'shorthandFirst': true, 'noSortAlphabetically': true}],
        'require-yield': 'warn',
        'rest-spread-spacing': [
            'warn',
            'never'
        ],
        'semi': 'error',
        'spaced-comment': [
            'error',
            'always',
            {
                'markers': [
                    '/'
                ]
            }
        ],
        'strict': [
            'warn',
            'never'
        ],
        'unicode-bom': [
            'warn',
            'never'
        ],
        'use-isnan': 'error',
        'valid-typeof': 'off',
        '@typescript-eslint/tslint/config': [
            'error',
            {
                'rules': {
                    'whitespace': [
                        true,
                        'check-branch',
                        'check-operator',
                        'check-typecast',
                        'check-type',
                        'check-rest-spread',
                        'check-preblock'
                    ]
                }
            }
        ]
    },
    'settings': {
        'react': {
            'version': 'detect'
        }
    }
};
